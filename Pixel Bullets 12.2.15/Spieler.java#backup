import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.Rectangle;
import java.util.*;
import javax.swing.*;

public class Spieler extends Objekt{

    protected Animation animationLinks, animationRechts, animationOben, animationUnten, animation;
    //Status
    protected double horizontaleGeschwindigkeit, vertikaleGeschwindigkeit;
    protected int momentanLeben;
    protected int unverwundbareZeit;
    protected boolean amLeben;
    protected String richtung;
    //Eigenschaften
    protected int maximalLeben;    
    protected double geschwindigkeit = 0.2;
    protected String name;
    private int angriffCooldown = 1000;
    private Waffe waffe;
    public Spieler(String name){
        super(10,10,1,1);
        maximalLeben = 100;
        momentanLeben = 100;
        waffe = new Pistole(this);
        Objektmanager.add(this);
    }

    public boolean amLeben(){
        return amLeben;
    }

    public void berechnen(){
        bewegungBerechnen();
        if(unverwundbareZeit>=0){
            unverwundbareZeit-=25;
        }
    }

    protected void sterben(){}

    public void bewegenHoch(){
        vertikaleGeschwindigkeit = -geschwindigkeit;
        richtung = "HOCH";
    }

    public void bewegenRunter(){
        vertikaleGeschwindigkeit = geschwindigkeit;
        richtung = "RUNTER";
    }

    public void bewegenLinks(){
        horizontaleGeschwindigkeit = -geschwindigkeit;
        richtung = "LINKS";
    }

    public void bewegenRechts(){
        horizontaleGeschwindigkeit = geschwindigkeit;
        richtung = "RECHTS";
    }

    private boolean kollidiert(double plusX,double plusY){        
        ArrayList<Hindernis> hindernisse = Objektmanager.getHindernisse();
        boolean kollidiert = false;
        Rectangle r = rect;
        r.setBounds((int)(x+plusX),(int)(y+plusY),(int)breite,(int)hoehe);
        for(int i=0; i<hindernisse.size(); i++){
            if(hindernisse.get(i).kollision(rect)){
                kollidiert = true;
                break;
            }            
        }
        return kollidiert;
    }

    protected void bewegungBerechnen(){
        angriffCooldown-= 25;

        if(!kollidiert(horizontaleGeschwindigkeit,0)){
            x += horizontaleGeschwindigkeit;
        }else{
            for(int i=0;i<Math.abs(horizontaleGeschwindigkeit);i++){
                if(!kollidiert(Math.signum(horizontaleGeschwindigkeit),0)){
                    x += Math.signum(horizontaleGeschwindigkeit);
                    break;
                }
            }
        }
        horizontaleGeschwindigkeit = 0;        

        if(!kollidiert(0,vertikaleGeschwindigkeit)){
            y += vertikaleGeschwindigkeit;
        }else{
            for(int i=0;i<Math.abs(vertikaleGeschwindigkeit);i++){
                if(!kollidiert(0,Math.signum(vertikaleGeschwindigkeit))){
                    y += Math.signum(vertikaleGeschwindigkeit);
                    break;
                }
            }
        }
        vertikaleGeschwindigkeit = 0;

        rect.setBounds((int)x,(int)y,breite,hoehe);
    }

    public void kriegtSchaden(double schaden, String richtung, double staerke){
        if(unverwundbareZeit<=0){
            kriegtSchaden(schaden);

        }
    }

    public void kriegtSchaden(double schaden){
        if(unverwundbareZeit<=0){
            momentanLeben -= schaden;
            if(momentanLeben<=0){
                momentanLeben=0;
                sterben();
            }

            unverwundbareZeit = 1000;
        }
    }

    public void angriff(){
        if(angriffCooldown <= 0){
            waffe.aktivieren();
            angriffCooldown = 1000;
        }
    }

    public void setX(double x){
        this.x=x;
    }

    public void setY(double y){
        this.y=y;
    }

    public int getMaximalLeben(){
        return maximalLeben;
    }

    public void setMaximalLeben(int leben){
        maximalLeben = leben;
    }

    public int getMomentanLeben(){
        return momentanLeben;
    }

    public void setMomentanLeben(int leben){
        momentanLeben = leben;
    }

    public String getRichtung(){
        return richtung;
    }

    public void zeichnen(Graphics g, JPanel panel){     
        //g.drawImage(animation.getNextPicture(),(int)xTmp,(int)yTmp,bTmp,hTmp, panel);
        g.fillRect((int)(x),(int)(y),breite,hoehe);
        waffe.zeichnen(g,panel);
    }

}