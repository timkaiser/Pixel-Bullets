import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.Rectangle;
import java.util.*;
import javax.swing.*;

abstract class Einheit extends Zeichenobjekt{

    protected Animation animationLinks, animationRechts, animationOben, animationUnten, animation;
    protected double horizontaleGeschwindigkeit, vertikaleGeschwindigkeit, maximalGeschwindigkeit, reibung;
    protected static int maximalLeben,momentanLeben;
    protected int unverwundbareZeit;
    protected boolean rechts,links,oben,unten;
    protected int xMitte, yMitte;
    public Einheit(Animation animationL,Animation animationR,Animation animationO,Animation animationU,BufferedImage maske, double x, double y, int breite, int hoehe){
        super(null,maske,x,y,breite,hoehe,5);
        maximalGeschwindigkeit = 2.0;
        animationLinks = animationL; 
        animationRechts = animationR;
        animationOben = animationO;
        animationUnten = animationU;
        animation = animationUnten;
        maximalLeben = 100;
        momentanLeben = 100;
        rechts = false;
        links = false;
        oben = false;
        unten = true;
        xMitte=10;
        yMitte=28;
    }

    public boolean getRechts(){
        return rechts;
    }

    public boolean getLinks(){
        return links;
    }

    public boolean getOben(){
        return oben;
    }

    public boolean getUnten(){
        return unten;
    }

    public void positionBerechnen(ArrayList<Hindernis> hindernisse){
        aeussereKraefte();
        versetzen(hindernisse);
        if(unverwundbareZeit>=0){
            unverwundbareZeit-=25;
        }
    }

    protected void aeussereKraefte(){
        reibungErmitteln();

        horizontaleGeschwindigkeit = reibung(horizontaleGeschwindigkeit);
        vertikaleGeschwindigkeit   = reibung(vertikaleGeschwindigkeit);
    }

    protected void reibungErmitteln(){
        reibung = 1.0;
    }

    protected void sterben(){}

    protected double reibung(double v){    
        if( (v>0 && v<reibung) || (v<0 && v>-reibung)){
            v = 0;
        }else if(v<0){
            v += reibung;
        }else if(v>0){
            v -= reibung;
        }

        return v;
    }

    protected void versetzen(ArrayList<Hindernis> hindernisse){
        boolean kollidiert = false;
        Hindernis kollisionsHindernis = null;
        for(int i=0; i<hindernisse.size(); i++){
            if(hindernisse.get(i).kollidiertMit(this,horizontaleGeschwindigkeit, 0)){
                kollidiert = true;
                kollisionsHindernis = hindernisse.get(i);
                //System.out.println("kollidiert");
                break;
            }            
        }

        if(!kollidiert){
            x += horizontaleGeschwindigkeit;
        }else{
            if(horizontaleGeschwindigkeit > 0){
                annaehern(0.1,0,kollisionsHindernis);
            }else if(horizontaleGeschwindigkeit < 0){                
                annaehern(-0.1,0,kollisionsHindernis);
            }
            horizontaleGeschwindigkeit = 0;
        }

        kollisionsmaske.setX(x);

        kollidiert = false;
        for(int i=0; i<hindernisse.size(); i++){
            if(hindernisse.get(i).kollidiertMit(this,0, vertikaleGeschwindigkeit)){
                kollidiert=true;
                kollisionsHindernis = hindernisse.get(i);
                //System.out.println("kollidiert");
                break;
            }            
        }

        if(!kollidiert){
            y += vertikaleGeschwindigkeit;
        }else{
            if(vertikaleGeschwindigkeit > 0){
                annaehern(0,0.1,kollisionsHindernis);
            }else if(vertikaleGeschwindigkeit < 0){                
                annaehern(0,-0.1,kollisionsHindernis);
            }
            vertikaleGeschwindigkeit = 0;
        }

        kollisionsmaske.setY(y);

        if(vertikaleGeschwindigkeit==0 && horizontaleGeschwindigkeit==0){
            animation.stoppeAnimation();
        }else if(horizontaleGeschwindigkeit>0){
            animation = animationLinks;
            rechts = true;
            links = false;
            oben = false;
            unten = false;
        }else if(horizontaleGeschwindigkeit<0){
            animation = animationRechts;
            rechts = false;
            links = true;
            oben = false;
            unten = false;
        }else if(vertikaleGeschwindigkeit>0){
            animation = animationUnten;
            rechts = false;
            links = false;
            oben = false;
            unten = true;
        }else if(vertikaleGeschwindigkeit<0){
            animation = animationOben;
            rechts = false;
            links = false;
            oben = true;
            unten = false;
        }
    }

    public void kollidiertMitSpieler(){};

    public void kriegtSchaden(double schaden, double quelleX, double quelleY, double f){
        if(unverwundbareZeit<=0){
            kriegtSchaden(schaden);

            double xtmp = quelleX-this.getXMittelpunkt();
            double ytmp = quelleY-this.getYMittelpunkt();
            double vektorlaenge = Math.sqrt((xtmp*xtmp)+(ytmp*ytmp));

            double x0 = xtmp/vektorlaenge;
            double y0 = ytmp/vektorlaenge;

            double xEnd = x0*-f;
            double yEnd = y0*-f;
            
            System.out.println(xtmp+"|"+ytmp+"|"+vektorlaenge+"|"+x0+"|"+y0+"|"+xEnd+"|"+yEnd+"|"+f);
            
            beschleunigen(xEnd,yEnd);
            /*double xtmp = quelleX-x;
            double ytmp = quelleY-y;
            double entfernung = Math.sqrt(xtmp*xtmp+ytmp*ytmp);
            double faktor = f/entfernung;
            double speedH = xtmp*faktor;
            double speedV = xtmp*faktor;

            if(quelleX>x){
            speedH=-speedH;
            }
            if(quelleY>y){
            speedV=-speedH;
            }

            beschleunigen(speedH,speedV);*/
            /*
            double winkel = Math.atan((quelleX-x)/(quelleY-y));
            double vh = Math.sin(winkel)*f;
            double vv = Math.cos(winkel)*f;

            if(quelleX<x){
            vh = vh*Math.signum(vh)*-1;
            }else{
            vh = vh*Math.signum(vh);
            }
            if(quelleY<y){
            vv = vv*Math.signum(vv)*-1;
            }else{
            vv = vv*Math.signum(vv);
            }
            beschleunigen(-vh,-vv);*/
        }
    }

    public void kriegtSchaden(double schaden){
        if(unverwundbareZeit<=0){
            momentanLeben -= schaden;
            if(momentanLeben<0){
                momentanLeben=0;
                sterben();
            }

            unverwundbareZeit = 1000;
        }
    }

    public void annaehern(double horizontal, double vertikal, Hindernis hindernis){
        /* while(!hindernis.kollidiertMit(this,horizontal, vertikal)){
        x += horizontal;
        y += vertikal;
        }*/

    }

    public void beschleunigen(double aX, double aY){
        horizontaleGeschwindigkeit = beschleunigenInRichtung(horizontaleGeschwindigkeit, aX);
        vertikaleGeschwindigkeit   = beschleunigenInRichtung(vertikaleGeschwindigkeit, aY);

        animation.starteAnimation();
    }

    protected double beschleunigenInRichtung(double v, double a){
        if( (v>=0 && v-reibung+a <= maximalGeschwindigkeit+a) || (v<=0 && v+reibung+a >= -maximalGeschwindigkeit+a) ){
            v += a;
        }

        return v;
    }

    public double getX(){
        return x;
    }

    public double getY(){
        return y;
    }
    
    public double getXMittelpunkt(){
        return x+xMitte;
    }

    public double getYMittelpunkt(){
        return y+yMitte;
    }

    public void setX(double x){
        this.x=x;
    }

    public void setY(double y){
        this.y=y;
    }

    public int getMaximalLeben(){
        return maximalLeben;
    }

    public void setMaximalLeben(int leben){
        maximalLeben = leben;
    }

    public int getMomentanLeben(){
        return momentanLeben;
    }

    public void setMomentanLeben(int leben){
        momentanLeben = leben;
    }

    public void zeichnen(Graphics g, double zoomfaktor, double xVerschiebung, double yVerschiebung, JPanel panel){

        double xTmp = (x-xVerschiebung)*zoomfaktor;
        double yTmp = (y-yVerschiebung)*zoomfaktor;
        int bTmp = (int)(((x-xVerschiebung+breite)*zoomfaktor)-(int)xTmp);
        int hTmp = (int)(((y-yVerschiebung+hoehe)*zoomfaktor)-(int)yTmp);

        if(hitboxen)
            g.drawImage(kollisionsmaske.getMaske(),(int)(xTmp), (int)(yTmp),bTmp,hTmp, panel);
        else
            g.drawImage(animation.getNextPicture(),(int)xTmp,(int)yTmp,bTmp,hTmp, panel);

        //g.drawRect((int)((x-xVerschiebung)*zoomfaktor),(int)((y-yVerschiebung)*zoomfaktor),(int)(breite*zoomfaktor),(int)(hoehe*zoomfaktor));
    }
}